@using Core;

@model ProductsListViewModel

<div class="products">
    @foreach (ProductViewModel product in Model.Products)
    {
        <div class="product">
            <div class="productContent">
                @* The shop sells colors, so there are no photos of the product. Instead, I place a div with the background of the color. *@
                <div class="productPhoto" style="background-color: @product.Name;"></div>
                @*<div class="productPhoto" ><img src="@product.PhotoUrl"/></div>*@

                <span class="productName">@product.Name</span>

                <span class="productPriceIncVAT">@product.PriceIncVAT.ToString("c")</span>
            </div>
            <div class="addItemButton clickable" onclick="addProduct('@Url.Action("AddProduct", "ShopCart", new { reference = product.Reference })'); return false;">
                <span class="">Want 1!</span>
            </div>
        </div>
    }
</div>

<div class="pagination">
    @Pagination(Model.PaginationInfo)
</div>



@helper Pagination(PaginationInfo paginationInfo)
{
    string selectedClass = "";

    for (int page = 1; page <= paginationInfo.PagesCount; page++)
    {
        selectedClass = (page == paginationInfo.CurrentPage) ? "selected btn btn-primary" : "btn btn-default";

        <span onclick="loadPage('@Url.Action("GetProducts", new {page = page})'); return false;" class="clickable @selectedClass">@page</span>
    }
}